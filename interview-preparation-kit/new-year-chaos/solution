#!/usr/bin/env node
'use strict';

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', inputStdin => {
  inputString += inputStdin;
});

process.stdin.on('end', _ => {
  inputString = inputString
    .replace(/\s*$/, '')
    .split('\n')
    .map(str => str.replace(/\s*$/, ''));

  main();
});

function readLine() {
  return inputString[currentLine++];
}

function minimumBribes(q) {
  const Q = [0].concat(q.slice()); // skip 0
  const counts = Array(Q.length).fill(0); // skip 0
  const swap = i => ([Q[i], Q[i + 1]] = [Q[i + 1], Q[i]]);

  for (let i = 1; i < Q.length; i++) {
    if (Q[i] !== i) {
      for (let j = i + 1; j < Q.length; j++) {
        if (Q[j] > Q[j - 1]) continue;
        swap(j - 1);
        counts[Q[j]]++;

        if (counts[Q[j]] > 2) {
          process.stdout.write('Too chaotic\n');
          return;
        }

        i--;
        break;
      }
    }
  }

  const sum = counts.reduce((s, x) => s + x, 0);
  process.stdout.write(`${sum}\n`);
}

function main() {
  const t = parseInt(readLine(), 10);

  for (let tItr = 0; tItr < t; tItr++) {
    const n = parseInt(readLine(), 10);
    const q = readLine()
      .split(' ')
      .map(qTemp => parseInt(qTemp, 10));
    minimumBribes(q);
  }
}
